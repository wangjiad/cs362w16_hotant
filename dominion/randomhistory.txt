Write up the development of your random testers, including improvements coverage and efforts to check the correctness of your specification by breaking the code, as randomhistory.txt:

gcov adventurer: Lines executed:28.17% of 646
Test Passes: 998
Test Fails: 2
gcov steward: Lines executed:25.08% of 646
Test Passes: 3000
Test Fails: 0

*note: running code on mac os sometimes creates mac specific error (abort), this however can be remedied by running the code over the oregonstate engineering server. 

For random testing I started by examining the randomtestadventurer code given to us. I experienced many abort and illegal operation errors therefore I decided to deconstruct the code and test each portion to see which created the errors. Most of my difficulty stemmed from these errors. The implementation of the previous card tests proved very useful and acted good check for the tests inside my random testers. I did not see the purpose of having three for loops so I condensed the code into one for loop, where each loop would create a new instance of initialize game. I took advantage of the implementation of seeds in initializeGame and randomized the seed for each loop. I also saw that for each time player was used inside of the code it was not initialized so I randomized player based on the players variable which contains the randomized number of players inside the game. I also populated the decks and physically put the card being tested into the players hand to ensure there was a card to be played. For each iteration of the loop, I called the cardEffect function passing in the card being tested. I would call it once for every possible choice of the card. For instance, steward has 3 choices and therefore must be called 3 times each iteration to provide coverage for every effect of that card. I compared these results against accepted values (oracle) and incremented my test pass and test fail variables accordingly. The above passes/fails are for 1,000 tests. Steward has 3,000 tests for the reasons explained in the previous sentence. I also utilized the empty coverage code block to cover for empty coverage. The ratio of passes (998) to fails (2) in adventurer leads me to believe there is some fault inside of the adventurer code. I manually broke my adventurer and steward code to see if it did in fact find the error, and it did fail the cards 100% of the time lets me know it will catch these types of errors. Steward is correct when I tested it for real. I think that this random tester is good because of its simplicity but also thoroughness in checking all possible actions of a card. It utilizes already existing implementations of randomness and reuses it to test cards in many different environments with different inputs. It also manually ensures some environment inputs to guarantee certain conditions. Both my tests have a good amount of coverage taking into account that it only tests 1 card per program tester. 
