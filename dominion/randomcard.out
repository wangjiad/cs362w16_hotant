        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
       75:   12:    return -1;
      135:   13:  return 0;
      210:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        5:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      760:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      400:   65:        }
       40:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
        4:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        1:   80:    }
        -:   81:  else
        -:   82:    {
        3:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
        4:   95:      state->supplyCount[estate] = 12;
        4:   96:      state->supplyCount[duchy] = 12;
        4:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
    #####:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        4:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      580:  130:	}
        -:  131:
       80:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       38:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       15:  140:      state->deckCount[i] = 0;
      120:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       45:  143:	  state->deck[i][j] = estate;
       45:  144:	  state->deckCount[i]++;
       45:  145:	}
      240:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      105:  148:	  state->deck[i][j] = copper;
      105:  149:	  state->deckCount[i]++;
      105:  150:	}
       15:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       38:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       15:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       15:  160:    }
        -:  161:
        -:  162:  //draw player hands
       38:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       15:  166:      state->handCount[i] = 0;
       15:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       15:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
      108:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
       20:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        9:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       15:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       15:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       15:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      330:  214:  while (state->deckCount[player] > 0) {
      150:  215:    card = floor(Random() * state->deckCount[player]);
      150:  216:    newDeck[newDeckPos] = state->deck[player][card];
      150:  217:    newDeckPos++;
      948:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      324:  219:      state->deck[player][i] = state->deck[player][i+1];
      324:  220:    }
      150:  221:    state->deckCount[player]--;
        -:  222:  }
      330:  223:  for (i = 0; i < newDeckPos; i++) {
      150:  224:    state->deck[player][i] = newDeck[i];
      150:  225:    state->deckCount[player]++;
      150:  226:  }
        -:  227:
       15:  228:  return 0;
       15:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
       54:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       81:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       38:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       38:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       38:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       38:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       38:  576:    state->deckCount[player]--;
       38:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       38:  580:  return 0;
       38:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int adventurerCard(int currentPlayer, struct gameState *state){
    #####:  647:  int drawntreasure=0;
        -:  648:  // int currentPlayer = whoseTurn(state);
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];// moved above the if statement
    #####:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:
    #####:  653:  while(drawntreasure<2){
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:      shuffle(currentPlayer, state);
    #####:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:      drawntreasure++;
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:      z++;
        -:  665:    }
        -:  666:      }
    #####:  667:  while(z-1>=0){
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
        -:  670:  }
    #####:  671:  return 0;
        -:  672:}
        -:  673:
        -:  674:int council_roomCard(int currentPlayer, struct gameState *state, int handPos){
        -:  675:  // int currentPlayer = whoseTurn(state);
        -:  676:  int i;
        -:  677:  //+4 Cards
    #####:  678:  for (i = 0; i < 4; i++){
    #####:  679:    drawCard(currentPlayer, state);
    #####:  680:  }
        -:  681:
        -:  682:  //+1 Buy
    #####:  683:  state->numBuys++;
        -:  684:
        -:  685:  //Each other player draws a card
    #####:  686:  for (i = 0; i < state->numPlayers; i++){
    #####:  687:    if ( i != currentPlayer ){
    #####:  688:      drawCard(i, state);
    #####:  689:    }
    #####:  690:  }
        -:  691:
        -:  692:  //put played card in played card pile
    #####:  693:  discardCard(handPos, currentPlayer, state, 0);
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
        -:  698:int feastCard(int currentPlayer, struct gameState *state, int choice1){
        -:  699:  // int currentPlayer = whoseTurn(state);
        -:  700:  int temphand[MAX_HAND];// moved above the if statement
        -:  701:  int i;
        -:  702:  int x;
        -:  703:
        -:  704:  //gain card with cost up to 5
        -:  705:  //Backup hand
    #####:  706:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  707:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  708:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  709:  }
        -:  710:  //Backup hand
        -:  711:
        -:  712:  //Update Coins for Buy
    #####:  713:  updateCoins(currentPlayer, state, 5);
    #####:  714:  x = 1;//Condition to loop on
    #####:  715:  while( x == 1) {//Buy one card
    #####:  716:    if (supplyCount(choice1, state) <= 0){
        -:  717:      if (DEBUG)
        -:  718:        printf("None of that card left, sorry!\n");
        -:  719:
        -:  720:      if (DEBUG){
        -:  721:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  722:      }
    #####:  723:    }
    #####:  724:    else if (state->coins < getCost(choice1)){
    #####:  725:      printf("That card is too expensive!\n");
        -:  726:
        -:  727:      if (DEBUG){
        -:  728:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  729:      }
    #####:  730:    }
        -:  731:    else{
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:      }
        -:  736:
    #####:  737:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  738:      x = 0;//No more buying cards
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  742:      }
        -:  743:    }
        -:  744:  }
        -:  745:
        -:  746:  //Reset Hand
    #####:  747:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  748:    state->hand[currentPlayer][i] = temphand[i];
    #####:  749:    temphand[i] = -1;
    #####:  750:  }
        -:  751:  //Reset Hand
        -:  752:
    #####:  753:  return 0;
        -:  754:}
        -:  755:
        -:  756:int remodelCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -:  757:  // int currentPlayer = whoseTurn(state);
    #####:  758:  int nextPlayer = currentPlayer + 1;
        -:  759:  int i;
        -:  760:  int j;
        -:  761:
    #####:  762:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  765:  {
    #####:  766:    return -1;
        -:  767:  }
        -:  768:
    #####:  769:  gainCard(choice2, state, 0, currentPlayer);
        -:  770:
        -:  771:  //discard card from hand
    #####:  772:  discardCard(handPos, currentPlayer, state, 0);
        -:  773:
        -:  774:  //discard trashed card
    #####:  775:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  776:  {
    #####:  777:    if (state->hand[currentPlayer][i] == j)
        -:  778:      {
    #####:  779:        discardCard(i, currentPlayer, state, 0);
    #####:  780:        break;
        -:  781:      }
    #####:  782:  }
    #####:  783:  return 0;
    #####:  784:}
        -:  785:
        -:  786:int smithyCard(int currentPlayer, struct gameState *state, int handPos){
        -:  787:  // int currentPlayer = whoseTurn(state);
        -:  788:  int i;
        -:  789:  //+3 Cards
    #####:  790:  for (i = 0; i < 3; i++)
        -:  791:    {
    #####:  792:    drawCard(currentPlayer, state);
    #####:  793:    }
        -:  794:
        -:  795:  //discard card from hand
    #####:  796:  discardCard(handPos, currentPlayer, state, 0);
    #####:  797:  return 0;
        -:  798:}
        -:  799:
        -:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805:  // int x;
        -:  806:  int index;
       27:  807:  int currentPlayer = whoseTurn(state);
       27:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
       27:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  // int temphand[MAX_HAND];// moved above the if statement
        -:  812:  // int drawntreasure=0;
        -:  813:  // int cardDrawn;
        -:  814:  // int z = 0;// this is the counter for the temp hand
       27:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
    #####:  817:  }
        -:  818:
        -:  819:  //uses switch to select card and perform actions
       27:  820:  switch( card )
        -:  821:    {
        -:  822:    case adventurer:
    #####:  823:      return adventurerCard(currentPlayer, state); //refactor
        -:  824:
        -:  825:    case council_room:
    #####:  826:      return council_roomCard(currentPlayer, state, handPos); //refactor
        -:  827:
        -:  828:    case feast:
    #####:  829:      return feastCard(currentPlayer, state, choice1); //refactor
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);
    #####:  863:	      break;
        -:  864:	    }
    #####:  865:	}
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      return remodelCard(currentPlayer, state, choice1, choice2, handPos); //refactor
        -:  871:
        -:  872:    case smithy:
    #####:  873:      return smithyCard(currentPlayer, state, handPos); //refactor
        -:  874:
        -:  875:    case village:
        -:  876:      //+1 Card
    #####:  877:      drawCard(currentPlayer, state);
        -:  878:
        -:  879:      //+2 Actions
    #####:  880:      state->numActions = state->numActions + 2;
        -:  881:
        -:  882:      //discard played card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:
        -:  886:    case baron:
    #####:  887:      state->numBuys++;//Increase buys by 1!
    #####:  888:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  889:	int p = 0;//Iterator for hand!
    #####:  890:	int card_not_discarded = 1;//Flag for discard set!
    #####:  891:	while(card_not_discarded){
    #####:  892:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  893:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  894:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  895:	    state->discardCount[currentPlayer]++;
    #####:  896:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  897:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  898:	    }
    #####:  899:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  900:	    state->handCount[currentPlayer]--;
    #####:  901:	    card_not_discarded = 0;//Exit the loop
    #####:  902:	  }
    #####:  903:	  else if (p > state->handCount[currentPlayer]){
        -:  904:	    if(DEBUG) {
        -:  905:	      printf("No estate cards in your hand, invalid choice\n");
        -:  906:	      printf("Must gain an estate if there are any\n");
        -:  907:	    }
    #####:  908:	    if (supplyCount(estate, state) > 0){
    #####:  909:	      gainCard(estate, state, 0, currentPlayer);
    #####:  910:	      state->supplyCount[estate]--;//Decrement estates
    #####:  911:	      if (supplyCount(estate, state) == 0){
    #####:  912:		isGameOver(state);
    #####:  913:	      }
    #####:  914:	    }
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    #####:  916:	  }
        -:  917:
        -:  918:	  else{
    #####:  919:	    p++;//Next card
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:
        -:  924:      else{
    #####:  925:	if (supplyCount(estate, state) > 0){
    #####:  926:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  927:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  928:	  if (supplyCount(estate, state) == 0){
    #####:  929:	    isGameOver(state);
    #####:  930:	  }
    #####:  931:	}
        -:  932:      }
        -:  933:
        -:  934:
    #####:  935:      return 0;
        -:  936:
        -:  937:    case great_hall:
        -:  938:      //+1 Card
    #####:  939:      drawCard(currentPlayer, state);
        -:  940:
        -:  941:      //+1 Actions
    #####:  942:      state->numActions++;
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
    #####:  946:      return 0;
        -:  947:
        -:  948:    case minion:
        -:  949:      //+1 action
    #####:  950:      state->numActions++;
        -:  951:
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
        -:  954:
    #####:  955:      if (choice1)		//+2 coins
        -:  956:	{
    #####:  957:	  state->coins = state->coins + 2;
    #####:  958:	}
        -:  959:
    #####:  960:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  961:	{
        -:  962:	  //discard hand
    #####:  963:	  while(numHandCards(state) > 0)
        -:  964:	    {
    #####:  965:	      discardCard(handPos, currentPlayer, state, 0);
        -:  966:	    }
        -:  967:
        -:  968:	  //draw 4
    #####:  969:	  for (i = 0; i < 4; i++)
        -:  970:	    {
    #####:  971:	      drawCard(currentPlayer, state);
    #####:  972:	    }
        -:  973:
        -:  974:	  //other players discard hand and redraw if hand size > 4
    #####:  975:	  for (i = 0; i < state->numPlayers; i++)
        -:  976:	    {
    #####:  977:	      if (i != currentPlayer)
        -:  978:		{
    #####:  979:		  if ( state->handCount[i] > 4 )
        -:  980:		    {
        -:  981:		      //discard hand
    #####:  982:		      while( state->handCount[i] > 0 )
        -:  983:			{
    #####:  984:			  discardCard(handPos, i, state, 0);
        -:  985:			}
        -:  986:
        -:  987:		      //draw 4
    #####:  988:		      for (j = 0; j < 4; j++)
        -:  989:			{
    #####:  990:			  drawCard(i, state);
    #####:  991:			}
    #####:  992:		    }
    #####:  993:		}
    #####:  994:	    }
        -:  995:
    #####:  996:	}
    #####:  997:      return 0;
        -:  998:
        -:  999:    case steward:
       27: 1000:      if (choice1 == 1)
        -: 1001:	{
        -: 1002:	  //+2 cards
        9: 1003:	  drawCard(currentPlayer, state);
        9: 1004:	  drawCard(currentPlayer, state);
        9: 1005:	}
       18: 1006:      else if (choice1 == 2)
        -: 1007:	{
        -: 1008:	  //+2 coins
        9: 1009:	  state->coins = state->coins + 2;
        9: 1010:	}
        -: 1011:      else
        -: 1012:	{
        -: 1013:	  //trash 2 cards in hand
        9: 1014:	  discardCard(choice2, currentPlayer, state, 1);
        9: 1015:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1016:	}
        -: 1017:
        -: 1018:      //discard card from hand
       27: 1019:      discardCard(handPos, currentPlayer, state, 0);
       27: 1020:      return 0;
        -: 1021:
        -: 1022:    case tribute:
    #####: 1023:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1024:	if (state->deckCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	  state->deckCount[nextPlayer]--;
    #####: 1027:	}
    #####: 1028:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1029:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:	  state->discardCount[nextPlayer]--;
    #####: 1031:	}
        -: 1032:	else{
        -: 1033:	  //No Card to Reveal
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("No cards to reveal\n");
        -: 1036:	  }
        -: 1037:	}
    #####: 1038:      }
        -: 1039:
        -: 1040:      else{
    #####: 1041:	if (state->deckCount[nextPlayer] == 0){
    #####: 1042:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1043:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:	    state->deckCount[nextPlayer]++;
    #####: 1045:	    state->discard[nextPlayer][i] = -1;
    #####: 1046:	    state->discardCount[nextPlayer]--;
    #####: 1047:	  }
        -: 1048:
    #####: 1049:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1050:	}
    #####: 1051:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
    #####: 1054:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:      }
        -: 1058:
    #####: 1059:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1060:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:	state->playedCardCount++;
    #####: 1062:	tributeRevealedCards[1] = -1;
    #####: 1063:      }
        -: 1064:
    #####: 1065:      for (i = 0; i <= 2; i ++){
    #####: 1066:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1067:	  state->coins += 2;
    #####: 1068:	}
        -: 1069:
    #####: 1070:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1071:	  drawCard(currentPlayer, state);
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	}
        -: 1074:	else{//Action Card
    #####: 1075:	  state->numActions = state->numActions + 2;
        -: 1076:	}
    #####: 1077:      }
        -: 1078:
    #####: 1079:      return 0;
        -: 1080:
        -: 1081:    case ambassador:
    #####: 1082:      j = 0;		//used to check if player has enough cards to discard
        -: 1083:
    #####: 1084:      if (choice2 > 2 || choice2 < 0)
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:
    #####: 1089:      if (choice1 == handPos)
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:
    #####: 1094:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	{
    #####: 1096:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1097:	    {
    #####: 1098:	      j++;
    #####: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (j < choice2)
        -: 1102:	{
    #####: 1103:	  return -1;
        -: 1104:	}
        -: 1105:
        -: 1106:      if (DEBUG)
        -: 1107:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1108:
        -: 1109:      //increase supply count for choosen card by amount being discarded
    #####: 1110:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1111:
        -: 1112:      //each other player gains a copy of revealed card
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
        -: 1116:	    {
    #####: 1117:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1118:	    }
    #####: 1119:	}
        -: 1120:
        -: 1121:      //discard played card from hand
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);
        -: 1123:
        -: 1124:      //trash copies of cards returned to supply
    #####: 1125:      for (j = 0; j < choice2; j++)
        -: 1126:	{
    #####: 1127:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	    {
    #####: 1129:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1130:		{
    #####: 1131:		  discardCard(i, currentPlayer, state, 1);
    #####: 1132:		  break;
        -: 1133:		}
    #####: 1134:	    }
    #####: 1135:	}
        -: 1136:
    #####: 1137:      return 0;
        -: 1138:
        -: 1139:    case cutpurse:
        -: 1140:
    #####: 1141:      updateCoins(currentPlayer, state, 2);
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
        -: 1145:	    {
    #####: 1146:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1147:		{
    #####: 1148:		  if (state->hand[i][j] == copper)
        -: 1149:		    {
    #####: 1150:		      discardCard(j, i, state, 0);
    #####: 1151:		      break;
        -: 1152:		    }
    #####: 1153:		  if (j == state->handCount[i])
        -: 1154:		    {
    #####: 1155:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1156:			{
        -: 1157:			  if (DEBUG)
        -: 1158:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1159:			}
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		}
        -: 1163:
    #####: 1164:	    }
        -: 1165:
    #####: 1166:	}
        -: 1167:
        -: 1168:      //discard played card from hand
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);
        -: 1170:
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
    #####: 1217:	if (i != currentPlayer){
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1221:	}
    #####: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
        -: 1226:      //search hand for another treasure_map
    #####: 1227:      index = -1;
    #####: 1228:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1229:	{
    #####: 1230:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1231:	    {
    #####: 1232:	      index = i;
    #####: 1233:	      break;
        -: 1234:	    }
    #####: 1235:	}
    #####: 1236:      if (index > -1)
        -: 1237:	{
        -: 1238:	  //trash both treasure cards
    #####: 1239:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1240:	  discardCard(index, currentPlayer, state, 1);
        -: 1241:
        -: 1242:	  //gain 4 Gold cards
    #####: 1243:	  for (i = 0; i < 4; i++)
        -: 1244:	    {
    #####: 1245:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1246:	    }
        -: 1247:
        -: 1248:	  //return success
    #####: 1249:	  return 1;
        -: 1250:	}
        -: 1251:
        -: 1252:      //no second treasure_map found in hand
    #####: 1253:      return -1;
        -: 1254:    }
        -: 1255:
    #####: 1256:  return -1;
       27: 1257:}
        -: 1258:
        -: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:
        -: 1262:  //if card is not trashed, added to Played pile
       45: 1263:  if (trashFlag < 1)
        -: 1264:    {
        -: 1265:      //add card to played pile
       27: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       27: 1267:      state->playedCardCount++;
       27: 1268:    }
        -: 1269:
        -: 1270:  //set played card to -1
       45: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:
        -: 1273:  //remove card from player's hand
       45: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
        1: 1277:      state->handCount[currentPlayer]--;
        1: 1278:    }
       44: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
    #####: 1283:    }
        -: 1284:  else
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
       44: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
       44: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
       44: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:
       45: 1294:  return 0;
        -: 1295:}
        -: 1296:
        -: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1302:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1303:    {
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
    #####: 1312:  if (toFlag == 1)
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
    #####: 1316:    }
    #####: 1317:  else if (toFlag == 2)
        -: 1318:    {
    #####: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:      state->handCount[player]++;
    #####: 1321:    }
        -: 1322:  else
        -: 1323:    {
    #####: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:
        -: 1328:  //decrease number in supply pile
    #####: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:
    #####: 1331:  return 0;
    #####: 1332:}
        -: 1333:
        -: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:
        -: 1338:  //reset coin count
        4: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
       48: 1342:  for (i = 0; i < state->handCount[player]; i++)
        -: 1343:    {
       20: 1344:      if (state->hand[player][i] == copper)
        -: 1345:	{
       12: 1346:	  state->coins += 1;
       12: 1347:	}
        8: 1348:      else if (state->hand[player][i] == silver)
        -: 1349:	{
    #####: 1350:	  state->coins += 2;
    #####: 1351:	}
        8: 1352:      else if (state->hand[player][i] == gold)
        -: 1353:	{
    #####: 1354:	  state->coins += 3;
    #####: 1355:	}
       20: 1356:    }
        -: 1357:
        -: 1358:  //add bonus
        4: 1359:  state->coins += bonus;
        -: 1360:
        4: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     1594:    9:  if (*(int*)a > *(int*)b)
      584:   10:    return 1;
     1010:   11:  if (*(int*)a < *(int*)b)
      610:   12:    return -1;
      400:   13:  return 0;
     1594:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       24:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        7:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      950:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      500:   65:        }
       50:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
        5:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        1:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        5:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
    #####:  117:		  }
        5:  118:		  else{ state->supplyCount[i] = 12; }
        5:  119:		}
        -:  120:	      else
        -:  121:		{
       45:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      725:  130:	}
        -:  131:
      100:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       19:  140:      state->deckCount[i] = 0;
      152:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       57:  143:	  state->deck[i][j] = estate;
       57:  144:	  state->deckCount[i]++;
       57:  145:	}
      304:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      133:  148:	  state->deck[i][j] = copper;
      133:  149:	  state->deckCount[i]++;
      133:  150:	}
       19:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       19:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       19:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       19:  166:      state->handCount[i] = 0;
       19:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       19:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
      135:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
       25:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
       12:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       20:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       20:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1074:  214:  while (state->deckCount[player] > 0) {
      517:  215:    card = floor(Random() * state->deckCount[player]);
      517:  216:    newDeck[newDeckPos] = state->deck[player][card];
      517:  217:    newDeckPos++;
    54290:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    26628:  219:      state->deck[player][i] = state->deck[player][i+1];
    26628:  220:    }
      517:  221:    state->deckCount[player]--;
        -:  222:  }
     1074:  223:  for (i = 0; i < newDeckPos; i++) {
      517:  224:    state->deck[player][i] = newDeck[i];
      517:  225:    state->deckCount[player]++;
      517:  226:  }
        -:  227:
       20:  228:  return 0;
       20:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
       72:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      108:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       49:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      656:  533:    for (i = 0; i < state->discardCount[player];i++){
      327:  534:      state->deck[player][i] = state->discard[player][i];
      327:  535:      state->discard[player][i] = -1;
      327:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        1:  565:  }
        -:  566:
        -:  567:  else{
       48:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       48:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       48:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       48:  576:    state->deckCount[player]--;
       48:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       49:  580:  return 0;
       49:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int adventurerCard(int currentPlayer, struct gameState *state){
    #####:  647:  int drawntreasure=0;
        -:  648:  // int currentPlayer = whoseTurn(state);
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];// moved above the if statement
    #####:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:
    #####:  653:  while(drawntreasure<2){
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:      shuffle(currentPlayer, state);
    #####:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:      drawntreasure++;
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:      z++;
        -:  665:    }
        -:  666:      }
    #####:  667:  while(z-1>=0){
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:    z=z-1;
        -:  670:  }
    #####:  671:  return 0;
        -:  672:}
        -:  673:
        -:  674:int council_roomCard(int currentPlayer, struct gameState *state, int handPos){
        -:  675:  // int currentPlayer = whoseTurn(state);
        -:  676:  int i;
        -:  677:  //+4 Cards
    #####:  678:  for (i = 0; i < 4; i++){
    #####:  679:    drawCard(currentPlayer, state);
    #####:  680:  }
        -:  681:
        -:  682:  //+1 Buy
    #####:  683:  state->numBuys++;
        -:  684:
        -:  685:  //Each other player draws a card
    #####:  686:  for (i = 0; i < state->numPlayers; i++){
    #####:  687:    if ( i != currentPlayer ){
    #####:  688:      drawCard(i, state);
    #####:  689:    }
    #####:  690:  }
        -:  691:
        -:  692:  //put played card in played card pile
    #####:  693:  discardCard(handPos, currentPlayer, state, 0);
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
        -:  698:int feastCard(int currentPlayer, struct gameState *state, int choice1){
        -:  699:  // int currentPlayer = whoseTurn(state);
        -:  700:  int temphand[MAX_HAND];// moved above the if statement
        -:  701:  int i;
        -:  702:  int x;
        -:  703:
        -:  704:  //gain card with cost up to 5
        -:  705:  //Backup hand
    #####:  706:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  707:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  708:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  709:  }
        -:  710:  //Backup hand
        -:  711:
        -:  712:  //Update Coins for Buy
    #####:  713:  updateCoins(currentPlayer, state, 5);
    #####:  714:  x = 1;//Condition to loop on
    #####:  715:  while( x == 1) {//Buy one card
    #####:  716:    if (supplyCount(choice1, state) <= 0){
        -:  717:      if (DEBUG)
        -:  718:        printf("None of that card left, sorry!\n");
        -:  719:
        -:  720:      if (DEBUG){
        -:  721:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  722:      }
    #####:  723:    }
    #####:  724:    else if (state->coins < getCost(choice1)){
    #####:  725:      printf("That card is too expensive!\n");
        -:  726:
        -:  727:      if (DEBUG){
        -:  728:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  729:      }
    #####:  730:    }
        -:  731:    else{
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:      }
        -:  736:
    #####:  737:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  738:      x = 0;//No more buying cards
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  742:      }
        -:  743:    }
        -:  744:  }
        -:  745:
        -:  746:  //Reset Hand
    #####:  747:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  748:    state->hand[currentPlayer][i] = temphand[i];
    #####:  749:    temphand[i] = -1;
    #####:  750:  }
        -:  751:  //Reset Hand
        -:  752:
    #####:  753:  return 0;
        -:  754:}
        -:  755:
        -:  756:int remodelCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -:  757:  // int currentPlayer = whoseTurn(state);
    #####:  758:  int nextPlayer = currentPlayer + 1;
        -:  759:  int i;
        -:  760:  int j;
        -:  761:
    #####:  762:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  765:  {
    #####:  766:    return -1;
        -:  767:  }
        -:  768:
    #####:  769:  gainCard(choice2, state, 0, currentPlayer);
        -:  770:
        -:  771:  //discard card from hand
    #####:  772:  discardCard(handPos, currentPlayer, state, 0);
        -:  773:
        -:  774:  //discard trashed card
    #####:  775:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  776:  {
    #####:  777:    if (state->hand[currentPlayer][i] == j)
        -:  778:      {
    #####:  779:        discardCard(i, currentPlayer, state, 0);
    #####:  780:        break;
        -:  781:      }
    #####:  782:  }
    #####:  783:  return 0;
    #####:  784:}
        -:  785:
        -:  786:int smithyCard(int currentPlayer, struct gameState *state, int handPos){
        -:  787:  // int currentPlayer = whoseTurn(state);
        -:  788:  int i;
        -:  789:  //+3 Cards
    #####:  790:  for (i = 0; i < 3; i++)
        -:  791:    {
    #####:  792:    drawCard(currentPlayer, state);
    #####:  793:    }
        -:  794:
        -:  795:  //discard card from hand
    #####:  796:  discardCard(handPos, currentPlayer, state, 0);
    #####:  797:  return 0;
        -:  798:}
        -:  799:
        -:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805:  // int x;
        -:  806:  int index;
       36:  807:  int currentPlayer = whoseTurn(state);
       36:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
       36:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  // int temphand[MAX_HAND];// moved above the if statement
        -:  812:  // int drawntreasure=0;
        -:  813:  // int cardDrawn;
        -:  814:  // int z = 0;// this is the counter for the temp hand
       36:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
    #####:  817:  }
        -:  818:
        -:  819:  //uses switch to select card and perform actions
       36:  820:  switch( card )
        -:  821:    {
        -:  822:    case adventurer:
    #####:  823:      return adventurerCard(currentPlayer, state); //refactor
        -:  824:
        -:  825:    case council_room:
    #####:  826:      return council_roomCard(currentPlayer, state, handPos); //refactor
        -:  827:
        -:  828:    case feast:
    #####:  829:      return feastCard(currentPlayer, state, choice1); //refactor
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);
    #####:  863:	      break;
        -:  864:	    }
    #####:  865:	}
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      return remodelCard(currentPlayer, state, choice1, choice2, handPos); //refactor
        -:  871:
        -:  872:    case smithy:
    #####:  873:      return smithyCard(currentPlayer, state, handPos); //refactor
        -:  874:
        -:  875:    case village:
        -:  876:      //+1 Card
    #####:  877:      drawCard(currentPlayer, state);
        -:  878:
        -:  879:      //+2 Actions
    #####:  880:      state->numActions = state->numActions + 2;
        -:  881:
        -:  882:      //discard played card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:
        -:  886:    case baron:
    #####:  887:      state->numBuys++;//Increase buys by 1!
    #####:  888:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  889:	int p = 0;//Iterator for hand!
    #####:  890:	int card_not_discarded = 1;//Flag for discard set!
    #####:  891:	while(card_not_discarded){
    #####:  892:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  893:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  894:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  895:	    state->discardCount[currentPlayer]++;
    #####:  896:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  897:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  898:	    }
    #####:  899:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  900:	    state->handCount[currentPlayer]--;
    #####:  901:	    card_not_discarded = 0;//Exit the loop
    #####:  902:	  }
    #####:  903:	  else if (p > state->handCount[currentPlayer]){
        -:  904:	    if(DEBUG) {
        -:  905:	      printf("No estate cards in your hand, invalid choice\n");
        -:  906:	      printf("Must gain an estate if there are any\n");
        -:  907:	    }
    #####:  908:	    if (supplyCount(estate, state) > 0){
    #####:  909:	      gainCard(estate, state, 0, currentPlayer);
    #####:  910:	      state->supplyCount[estate]--;//Decrement estates
    #####:  911:	      if (supplyCount(estate, state) == 0){
    #####:  912:		isGameOver(state);
    #####:  913:	      }
    #####:  914:	    }
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    #####:  916:	  }
        -:  917:
        -:  918:	  else{
    #####:  919:	    p++;//Next card
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:
        -:  924:      else{
    #####:  925:	if (supplyCount(estate, state) > 0){
    #####:  926:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  927:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  928:	  if (supplyCount(estate, state) == 0){
    #####:  929:	    isGameOver(state);
    #####:  930:	  }
    #####:  931:	}
        -:  932:      }
        -:  933:
        -:  934:
    #####:  935:      return 0;
        -:  936:
        -:  937:    case great_hall:
        -:  938:      //+1 Card
    #####:  939:      drawCard(currentPlayer, state);
        -:  940:
        -:  941:      //+1 Actions
    #####:  942:      state->numActions++;
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
    #####:  946:      return 0;
        -:  947:
        -:  948:    case minion:
        -:  949:      //+1 action
    #####:  950:      state->numActions++;
        -:  951:
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
        -:  954:
    #####:  955:      if (choice1)		//+2 coins
        -:  956:	{
    #####:  957:	  state->coins = state->coins + 2;
    #####:  958:	}
        -:  959:
    #####:  960:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  961:	{
        -:  962:	  //discard hand
    #####:  963:	  while(numHandCards(state) > 0)
        -:  964:	    {
    #####:  965:	      discardCard(handPos, currentPlayer, state, 0);
        -:  966:	    }
        -:  967:
        -:  968:	  //draw 4
    #####:  969:	  for (i = 0; i < 4; i++)
        -:  970:	    {
    #####:  971:	      drawCard(currentPlayer, state);
    #####:  972:	    }
        -:  973:
        -:  974:	  //other players discard hand and redraw if hand size > 4
    #####:  975:	  for (i = 0; i < state->numPlayers; i++)
        -:  976:	    {
    #####:  977:	      if (i != currentPlayer)
        -:  978:		{
    #####:  979:		  if ( state->handCount[i] > 4 )
        -:  980:		    {
        -:  981:		      //discard hand
    #####:  982:		      while( state->handCount[i] > 0 )
        -:  983:			{
    #####:  984:			  discardCard(handPos, i, state, 0);
        -:  985:			}
        -:  986:
        -:  987:		      //draw 4
    #####:  988:		      for (j = 0; j < 4; j++)
        -:  989:			{
    #####:  990:			  drawCard(i, state);
    #####:  991:			}
    #####:  992:		    }
    #####:  993:		}
    #####:  994:	    }
        -:  995:
    #####:  996:	}
    #####:  997:      return 0;
        -:  998:
        -:  999:    case steward:
       36: 1000:      if (choice1 == 1)
        -: 1001:	{
        -: 1002:	  //+2 cards
       12: 1003:	  drawCard(currentPlayer, state);
       12: 1004:	  drawCard(currentPlayer, state);
       12: 1005:	}
       24: 1006:      else if (choice1 == 2)
        -: 1007:	{
        -: 1008:	  //+2 coins
       12: 1009:	  state->coins = state->coins + 2;
       12: 1010:	}
        -: 1011:      else
        -: 1012:	{
        -: 1013:	  //trash 2 cards in hand
       12: 1014:	  discardCard(choice2, currentPlayer, state, 1);
       12: 1015:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1016:	}
        -: 1017:
        -: 1018:      //discard card from hand
       36: 1019:      discardCard(handPos, currentPlayer, state, 0);
       36: 1020:      return 0;
        -: 1021:
        -: 1022:    case tribute:
    #####: 1023:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1024:	if (state->deckCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	  state->deckCount[nextPlayer]--;
    #####: 1027:	}
    #####: 1028:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1029:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:	  state->discardCount[nextPlayer]--;
    #####: 1031:	}
        -: 1032:	else{
        -: 1033:	  //No Card to Reveal
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("No cards to reveal\n");
        -: 1036:	  }
        -: 1037:	}
    #####: 1038:      }
        -: 1039:
        -: 1040:      else{
    #####: 1041:	if (state->deckCount[nextPlayer] == 0){
    #####: 1042:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1043:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:	    state->deckCount[nextPlayer]++;
    #####: 1045:	    state->discard[nextPlayer][i] = -1;
    #####: 1046:	    state->discardCount[nextPlayer]--;
    #####: 1047:	  }
        -: 1048:
    #####: 1049:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1050:	}
    #####: 1051:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
    #####: 1054:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:      }
        -: 1058:
    #####: 1059:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1060:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:	state->playedCardCount++;
    #####: 1062:	tributeRevealedCards[1] = -1;
    #####: 1063:      }
        -: 1064:
    #####: 1065:      for (i = 0; i <= 2; i ++){
    #####: 1066:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1067:	  state->coins += 2;
    #####: 1068:	}
        -: 1069:
    #####: 1070:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1071:	  drawCard(currentPlayer, state);
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	}
        -: 1074:	else{//Action Card
    #####: 1075:	  state->numActions = state->numActions + 2;
        -: 1076:	}
    #####: 1077:      }
        -: 1078:
    #####: 1079:      return 0;
        -: 1080:
        -: 1081:    case ambassador:
    #####: 1082:      j = 0;		//used to check if player has enough cards to discard
        -: 1083:
    #####: 1084:      if (choice2 > 2 || choice2 < 0)
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:
    #####: 1089:      if (choice1 == handPos)
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:
    #####: 1094:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	{
    #####: 1096:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1097:	    {
    #####: 1098:	      j++;
    #####: 1099:	    }
    #####: 1100:	}
    #####: 1101:      if (j < choice2)
        -: 1102:	{
    #####: 1103:	  return -1;
        -: 1104:	}
        -: 1105:
        -: 1106:      if (DEBUG)
        -: 1107:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1108:
        -: 1109:      //increase supply count for choosen card by amount being discarded
    #####: 1110:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1111:
        -: 1112:      //each other player gains a copy of revealed card
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
        -: 1116:	    {
    #####: 1117:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1118:	    }
    #####: 1119:	}
        -: 1120:
        -: 1121:      //discard played card from hand
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);
        -: 1123:
        -: 1124:      //trash copies of cards returned to supply
    #####: 1125:      for (j = 0; j < choice2; j++)
        -: 1126:	{
    #####: 1127:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	    {
    #####: 1129:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1130:		{
    #####: 1131:		  discardCard(i, currentPlayer, state, 1);
    #####: 1132:		  break;
        -: 1133:		}
    #####: 1134:	    }
    #####: 1135:	}
        -: 1136:
    #####: 1137:      return 0;
        -: 1138:
        -: 1139:    case cutpurse:
        -: 1140:
    #####: 1141:      updateCoins(currentPlayer, state, 2);
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
        -: 1145:	    {
    #####: 1146:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1147:		{
    #####: 1148:		  if (state->hand[i][j] == copper)
        -: 1149:		    {
    #####: 1150:		      discardCard(j, i, state, 0);
    #####: 1151:		      break;
        -: 1152:		    }
    #####: 1153:		  if (j == state->handCount[i])
        -: 1154:		    {
    #####: 1155:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1156:			{
        -: 1157:			  if (DEBUG)
        -: 1158:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1159:			}
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		}
        -: 1163:
    #####: 1164:	    }
        -: 1165:
    #####: 1166:	}
        -: 1167:
        -: 1168:      //discard played card from hand
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);
        -: 1170:
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
    #####: 1217:	if (i != currentPlayer){
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1221:	}
    #####: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
        -: 1226:      //search hand for another treasure_map
    #####: 1227:      index = -1;
    #####: 1228:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1229:	{
    #####: 1230:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1231:	    {
    #####: 1232:	      index = i;
    #####: 1233:	      break;
        -: 1234:	    }
    #####: 1235:	}
    #####: 1236:      if (index > -1)
        -: 1237:	{
        -: 1238:	  //trash both treasure cards
    #####: 1239:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1240:	  discardCard(index, currentPlayer, state, 1);
        -: 1241:
        -: 1242:	  //gain 4 Gold cards
    #####: 1243:	  for (i = 0; i < 4; i++)
        -: 1244:	    {
    #####: 1245:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1246:	    }
        -: 1247:
        -: 1248:	  //return success
    #####: 1249:	  return 1;
        -: 1250:	}
        -: 1251:
        -: 1252:      //no second treasure_map found in hand
    #####: 1253:      return -1;
        -: 1254:    }
        -: 1255:
    #####: 1256:  return -1;
       36: 1257:}
        -: 1258:
        -: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:
        -: 1262:  //if card is not trashed, added to Played pile
       60: 1263:  if (trashFlag < 1)
        -: 1264:    {
        -: 1265:      //add card to played pile
       36: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       36: 1267:      state->playedCardCount++;
       36: 1268:    }
        -: 1269:
        -: 1270:  //set played card to -1
       60: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:
        -: 1273:  //remove card from player's hand
       60: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
        1: 1277:      state->handCount[currentPlayer]--;
        1: 1278:    }
       59: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
    #####: 1283:    }
        -: 1284:  else
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
       59: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
       59: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
       59: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:
       60: 1294:  return 0;
        -: 1295:}
        -: 1296:
        -: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1302:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1303:    {
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
    #####: 1312:  if (toFlag == 1)
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
    #####: 1316:    }
    #####: 1317:  else if (toFlag == 2)
        -: 1318:    {
    #####: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:      state->handCount[player]++;
    #####: 1321:    }
        -: 1322:  else
        -: 1323:    {
    #####: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:
        -: 1328:  //decrease number in supply pile
    #####: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:
    #####: 1331:  return 0;
    #####: 1332:}
        -: 1333:
        -: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:
        -: 1338:  //reset coin count
        5: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
       60: 1342:  for (i = 0; i < state->handCount[player]; i++)
        -: 1343:    {
       25: 1344:      if (state->hand[player][i] == copper)
        -: 1345:	{
       15: 1346:	  state->coins += 1;
       15: 1347:	}
       10: 1348:      else if (state->hand[player][i] == silver)
        -: 1349:	{
    #####: 1350:	  state->coins += 2;
    #####: 1351:	}
       10: 1352:      else if (state->hand[player][i] == gold)
        -: 1353:	{
    #####: 1354:	  state->coins += 3;
    #####: 1355:	}
       25: 1356:    }
        -: 1357:
        -: 1358:  //add bonus
        5: 1359:  state->coins += bonus;
        -: 1360:
        5: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
