        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    30800:    9:  if (*(int*)a > *(int*)b)
    10624:   10:    return 1;
    20176:   11:  if (*(int*)a < *(int*)b)
     8387:   12:    return -1;
    11789:   13:  return 0;
    30800:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
        9:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        9:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1980:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1710:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      900:   65:        }
       90:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        2:   76:    }
        7:   77:  else if (numPlayers == 3)
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        2:   80:    }
        -:   81:  else
        -:   82:    {
        5:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        2:   92:    }
        -:   93:  else
        -:   94:    {
        7:   95:      state->supplyCount[estate] = 12;
        7:   96:      state->supplyCount[duchy] = 12;
        7:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3150:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1476:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      157:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       10:  115:		  if (numPlayers == 2){
        2:  116:		    state->supplyCount[i] = 8;
        2:  117:		  }
        8:  118:		  else{ state->supplyCount[i] = 12; }
       10:  119:		}
        -:  120:	      else
        -:  121:		{
       71:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       81:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1395:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1395:  130:	}
        -:  131:
      180:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       78:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       30:  140:      state->deckCount[i] = 0;
      240:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       90:  143:	  state->deck[i][j] = estate;
       90:  144:	  state->deckCount[i]++;
       90:  145:	}
      480:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      210:  148:	  state->deck[i][j] = copper;
      210:  149:	  state->deckCount[i]++;
      210:  150:	}
       30:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       78:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       30:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       30:  160:    }
        -:  161:
        -:  162:  //draw player hands
       78:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       30:  166:      state->handCount[i] = 0;
       30:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       30:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
      243:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
       45:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        9:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1667:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1667:  209:  if (state->deckCount[player] < 1)
      335:  210:    return -1;
     1332:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    34528:  214:  while (state->deckCount[player] > 0) {
    15932:  215:    card = floor(Random() * state->deckCount[player]);
    15932:  216:    newDeck[newDeckPos] = state->deck[player][card];
    15932:  217:    newDeckPos++;
   164694:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    66415:  219:      state->deck[player][i] = state->deck[player][i+1];
    66415:  220:    }
    15932:  221:    state->deckCount[player]--;
        -:  222:  }
    34528:  223:  for (i = 0; i < newDeckPos; i++) {
    15932:  224:    state->deck[player][i] = newDeck[i];
    15932:  225:    state->deckCount[player]++;
    15932:  226:  }
        -:  227:
     1332:  228:  return 0;
     1667:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
     1636:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     1636:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
     1636:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
     1636:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
     2599:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
      673:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
      963:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
      422:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
      541:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      541:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      541:  269:  return 0;
     1636:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     2949:  280:  who = state->whoseTurn;
        -:  281:
     2949:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     2949:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      261:  289:    return -1;
     2688:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
     1442:  293:    return -1;
        -:  294:  } else {
     1246:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     1246:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
     1246:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     1246:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
     1246:  308:  return 0;
     2949:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1636:  316:  int currentPlayer = whoseTurn(state);
     1636:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     4306:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     2912:  326:  int count = 0;
        -:  327:
    54618:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    25474:  330:      if (state->deck[player][i] == card) count++;
    24397:  331:    }
        -:  332:
    13686:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     4139:  335:      if (state->hand[player][i] == card) count++;
     3931:  336:    }
        -:  337:
   106758:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    52634:  340:      if (state->discard[player][i] == card) count++;
    50467:  341:    }
        -:  342:
     2912:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     8497:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     2949:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    34390:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    14246:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    14246:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    14246:  359:  }
     2949:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
     2949:  363:  if (currentPlayer < (state->numPlayers - 1)){
     2012:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
     2012:  365:  }
        -:  366:  else{
      937:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     2949:  370:  state->outpostPlayed = 0;
     2949:  371:  state->phase = 0;
     2949:  372:  state->numActions = 1;
     2949:  373:  state->coins = 0;
     2949:  374:  state->numBuys = 1;
     2949:  375:  state->playedCardCount = 0;
     2949:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    35388:  380:  for (k = 0; k < 5; k++){
    14745:  381:    drawCard(state->whoseTurn, state);//Draw a card
    14745:  382:  }
        -:  383:
        -:  384:  //Update money
     2949:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     2949:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     2958:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     2958:  401:  j = 0;
   153816:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    73950:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2337:  406:	  j++;
     2337:  407:	}
    73950:  408:    }
     2958:  409:  if ( j >= 3)
        -:  410:    {
        9:  411:      return 1;
        -:  412:    }
        -:  413:
     2949:  414:  return 0;
     2958:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    11832:  420:  int score = 0;
        -:  421:  //score from hand
    52668:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    15842:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    17352:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    15173:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    14556:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    14547:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    14701:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    14502:  430:    }
        -:  431:
        -:  432:  //score from discard
   208934:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    99040:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
   109540:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    97631:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    93070:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    92949:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    94007:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    92635:  441:    }
        -:  442:
        -:  443:  //score from deck
        -:  444:  //THIS WAS DISCARD COUNT NOT DECK COUNT
   199714:  445:  for (i = 0; i < state->deckCount[player]; i++)
        -:  446:    {
    94220:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
   104365:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    92412:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    88349:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    88275:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    89366:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    88025:  453:    }
        -:  454:
    11832:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
    15063:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    34460:  534:    for (i = 0; i < state->discardCount[player];i++){
    15602:  535:      state->deck[player][i] = state->discard[player][i];
    15602:  536:      state->discard[player][i] = -1;
    15602:  537:    }
        -:  538:
     1628:  539:    state->deckCount[player] = state->discardCount[player];
     1628:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
     1628:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:
     1628:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
     1628:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:
     1628:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
     1628:  560:    if (deckCounter == 0)
      334:  561:      return -1;
        -:  562:
     1294:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1294:  564:    state->deckCount[player]--;
     1294:  565:    state->handCount[player]++;//Increment hand count
     1294:  566:  }
        -:  567:
        -:  568:  else{
    13435:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
    13435:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13435:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13435:  577:    state->deckCount[player]--;
    13435:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
    14729:  581:  return 0;
    15063:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
     4374:  586:  switch( cardNumber )
        -:  587:    {
        -:  588:    case curse:
      408:  589:      return 0;
        -:  590:    case estate:
      219:  591:      return 2;
        -:  592:    case duchy:
      383:  593:      return 5;
        -:  594:    case province:
      382:  595:      return 8;
        -:  596:    case copper:
      615:  597:      return 0;
        -:  598:    case silver:
      586:  599:      return 3;
        -:  600:    case gold:
      388:  601:      return 6;
        -:  602:    case adventurer:
       38:  603:      return 6;
        -:  604:    case council_room:
       76:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
       70:  609:      return 4;
        -:  610:    case mine:
       63:  611:      return 5;
        -:  612:    case remodel:
      165:  613:      return 4;
        -:  614:    case smithy:
      109:  615:      return 4;
        -:  616:    case village:
       37:  617:      return 3;
        -:  618:    case baron:
       31:  619:      return 4;
        -:  620:    case great_hall:
       95:  621:      return 3;
        -:  622:    case minion:
       55:  623:      return 5;
        -:  624:    case steward:
      117:  625:      return 3;
        -:  626:    case tribute:
       45:  627:      return 5;
        -:  628:    case ambassador:
       60:  629:      return 3;
        -:  630:    case cutpurse:
       70:  631:      return 4;
        -:  632:    case embargo:
       82:  633:      return 2;
        -:  634:    case outpost:
       24:  635:      return 5;
        -:  636:    case salvager:
      135:  637:      return 4;
        -:  638:    case sea_hag:
      105:  639:      return 4;
        -:  640:    case treasure_map:
       16:  641:      return 4;
        -:  642:    }
        -:  643:
    #####:  644:  return -1;
     4374:  645:}
        -:  646:
        -:  647:int adventurerCard(int currentPlayer, struct gameState *state){
        1:  648:  int drawntreasure=0;
        -:  649:  // int currentPlayer = whoseTurn(state);
        -:  650:  int cardDrawn;
        -:  651:  int temphand[MAX_HAND];// moved above the if statement
        1:  652:  int z = 0;// this is the counter for the temp hand
        -:  653:
       14:  654:  while(drawntreasure<2){
        6:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        1:  656:      shuffle(currentPlayer, state);
        1:  657:    }
        6:  658:    drawCard(currentPlayer, state);
        6:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  661:      drawntreasure++;
        -:  662:    else{
        4:  663:      temphand[z]=cardDrawn;
        4:  664:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        4:  665:      z++;
        -:  666:    }
        -:  667:      }
       10:  668:  while(z-1>=0){
        4:  669:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  670:    z=z-1;
        -:  671:  }
        1:  672:  return 0;
        -:  673:}
        -:  674:
        -:  675:int council_roomCard(int currentPlayer, struct gameState *state, int handPos){
        -:  676:  // int currentPlayer = whoseTurn(state);
        -:  677:  int i;
        -:  678:  //+4 Cards
      170:  679:  for (i = 0; i < 4; i++){
       68:  680:    drawCard(currentPlayer, state);
       68:  681:  }
        -:  682:
        -:  683:  //+1 Buy
       17:  684:  state->numBuys++;
        -:  685:
        -:  686:  //Each other player draws a card
      150:  687:  for (i = 0; i < state->numPlayers; i++){
       58:  688:    if ( i != currentPlayer ){
       41:  689:      drawCard(i, state);
       41:  690:    }
       58:  691:  }
        -:  692:
        -:  693:  //put played card in played card pile
       17:  694:  discardCard(handPos, currentPlayer, state, 0);
        -:  695:
       17:  696:  return 0;
        -:  697:}
        -:  698:
        -:  699:int feastCard(int currentPlayer, struct gameState *state, int choice1){
        -:  700:  // int currentPlayer = whoseTurn(state);
        -:  701:  int temphand[MAX_HAND];// moved above the if statement
        -:  702:  int i;
        -:  703:  int x;
        -:  704:
        -:  705:  //gain card with cost up to 5
        -:  706:  //Backup hand
    #####:  707:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  708:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  709:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  710:  }
        -:  711:  //Backup hand
        -:  712:
        -:  713:  //Update Coins for Buy
    #####:  714:  updateCoins(currentPlayer, state, 5);
    #####:  715:  x = 1;//Condition to loop on
    #####:  716:  while( x == 1) {//Buy one card
    #####:  717:    if (supplyCount(choice1, state) <= 0){
        -:  718:      if (DEBUG)
        -:  719:        printf("None of that card left, sorry!\n");
        -:  720:
        -:  721:      if (DEBUG){
        -:  722:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  723:      }
    #####:  724:    }
    #####:  725:    else if (state->coins < getCost(choice1)){
    #####:  726:      printf("That card is too expensive!\n");
        -:  727:
        -:  728:      if (DEBUG){
        -:  729:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  730:      }
    #####:  731:    }
        -:  732:    else{
        -:  733:
        -:  734:      if (DEBUG){
        -:  735:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:      }
        -:  737:
    #####:  738:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  739:      x = 0;//No more buying cards
        -:  740:
        -:  741:      if (DEBUG){
        -:  742:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:      }
        -:  744:    }
        -:  745:  }
        -:  746:
        -:  747:  //Reset Hand
    #####:  748:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  749:    state->hand[currentPlayer][i] = temphand[i];
    #####:  750:    temphand[i] = -1;
    #####:  751:  }
        -:  752:  //Reset Hand
        -:  753:
    #####:  754:  return 0;
        -:  755:}
        -:  756:
        -:  757:int remodelCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -:  758:  // int currentPlayer = whoseTurn(state);
        -:  759:  // int nextPlayer = currentPlayer + 1;
        -:  760:  int i;
        -:  761:  int j;
        -:  762:
      186:  763:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
      186:  765:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  766:  {
      186:  767:    return -1;
        -:  768:  }
        -:  769:
    #####:  770:  gainCard(choice2, state, 0, currentPlayer);
        -:  771:
        -:  772:  //discard card from hand
    #####:  773:  discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:  //discard trashed card
    #####:  776:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:  {
    #####:  778:    if (state->hand[currentPlayer][i] == j)
        -:  779:      {
    #####:  780:        discardCard(i, currentPlayer, state, 0);
    #####:  781:        break;
        -:  782:      }
    #####:  783:  }
    #####:  784:  return 0;
      186:  785:}
        -:  786:
        -:  787:int smithyCard(int currentPlayer, struct gameState *state, int handPos){
        -:  788:  // int currentPlayer = whoseTurn(state);
        -:  789:  int i;
        -:  790:  //+3 Cards
      248:  791:  for (i = 0; i < 3; i++)
        -:  792:    {
       93:  793:    drawCard(currentPlayer, state);
       93:  794:    }
        -:  795:
        -:  796:  //discard card from hand
       31:  797:  discardCard(handPos, currentPlayer, state, 0);
       31:  798:  return 0;
        -:  799:}
        -:  800:
        -:  801:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  802:{
        -:  803:  int i;
        -:  804:  int j;
        -:  805:  int k;
        -:  806:  // int x;
        -:  807:  int index;
      963:  808:  int currentPlayer = whoseTurn(state);
      963:  809:  int nextPlayer = currentPlayer + 1;
        -:  810:
      963:  811:  int tributeRevealedCards[2] = {-1, -1};
        -:  812:  // int temphand[MAX_HAND];// moved above the if statement
        -:  813:  // int drawntreasure=0;
        -:  814:  // int cardDrawn;
        -:  815:  // int z = 0;// this is the counter for the temp hand
      963:  816:  if (nextPlayer > (state->numPlayers - 1)){
      292:  817:    nextPlayer = 0;
      292:  818:  }
        -:  819:
        -:  820:  //uses switch to select card and perform actions
      963:  821:  switch( card )
        -:  822:    {
        -:  823:    case adventurer:
        1:  824:      return adventurerCard(currentPlayer, state); //refactor
        -:  825:
        -:  826:    case council_room:
       17:  827:      return council_roomCard(currentPlayer, state, handPos); //refactor
        -:  828:
        -:  829:    case feast:
    #####:  830:      return feastCard(currentPlayer, state, choice1); //refactor
        -:  831:
        -:  832:    case gardens:
      124:  833:      return -1;
        -:  834:
        -:  835:    case mine:
       77:  836:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  837:
      136:  838:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  839:	{
       43:  840:	  return -1;
        -:  841:	}
        -:  842:
       68:  843:      if (choice2 > treasure_map || choice2 < curse)
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
       34:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  849:	{
       34:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 2, currentPlayer);
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);
    #####:  864:	      break;
        -:  865:	    }
    #####:  866:	}
        -:  867:
    #####:  868:      return 0;
        -:  869:
        -:  870:    case remodel:
      186:  871:      return remodelCard(currentPlayer, state, choice1, choice2, handPos); //refactor
        -:  872:
        -:  873:    case smithy:
       31:  874:      return smithyCard(currentPlayer, state, handPos); //refactor
        -:  875:
        -:  876:    case village:
        -:  877:      //+1 Card
        8:  878:      drawCard(currentPlayer, state);
        -:  879:
        -:  880:      //+2 Actions
        8:  881:      state->numActions = state->numActions + 2;
        -:  882:
        -:  883:      //discard played card from hand
        8:  884:      discardCard(handPos, currentPlayer, state, 0);
        8:  885:      return 0;
        -:  886:
        -:  887:    case baron:
       47:  888:      state->numBuys++;//Increase buys by 1!
       47:  889:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  890:	int p = 0;//Iterator for hand!
    #####:  891:	int card_not_discarded = 1;//Flag for discard set!
    #####:  892:	while(card_not_discarded){
    #####:  893:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  894:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  895:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  896:	    state->discardCount[currentPlayer]++;
    #####:  897:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  898:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  899:	    }
    #####:  900:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  901:	    state->handCount[currentPlayer]--;
    #####:  902:	    card_not_discarded = 0;//Exit the loop
    #####:  903:	  }
    #####:  904:	  else if (p > state->handCount[currentPlayer]){
        -:  905:	    if(DEBUG) {
        -:  906:	      printf("No estate cards in your hand, invalid choice\n");
        -:  907:	      printf("Must gain an estate if there are any\n");
        -:  908:	    }
    #####:  909:	    if (supplyCount(estate, state) > 0){
    #####:  910:	      gainCard(estate, state, 0, currentPlayer);
    #####:  911:	      state->supplyCount[estate]--;//Decrement estates
    #####:  912:	      if (supplyCount(estate, state) == 0){
    #####:  913:		isGameOver(state);
    #####:  914:	      }
    #####:  915:	    }
    #####:  916:	    card_not_discarded = 0;//Exit the loop
    #####:  917:	  }
        -:  918:
        -:  919:	  else{
    #####:  920:	    p++;//Next card
        -:  921:	  }
        -:  922:	}
    #####:  923:      }
        -:  924:
        -:  925:      else{
       47:  926:	if (supplyCount(estate, state) > 0){
        4:  927:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        4:  928:	  state->supplyCount[estate]--;//Decrement Estates
        4:  929:	  if (supplyCount(estate, state) == 0){
    #####:  930:	    isGameOver(state);
    #####:  931:	  }
        4:  932:	}
        -:  933:      }
        -:  934:
        -:  935:
       47:  936:      return 0;
        -:  937:
        -:  938:    case great_hall:
        -:  939:      //+1 Card
       33:  940:      drawCard(currentPlayer, state);
        -:  941:
        -:  942:      //+1 Actions
       33:  943:      state->numActions++;
        -:  944:
        -:  945:      //discard card from hand
       33:  946:      discardCard(handPos, currentPlayer, state, 0);
       33:  947:      return 0;
        -:  948:
        -:  949:    case minion:
        -:  950:      //+1 action
        8:  951:      state->numActions++;
        -:  952:
        -:  953:      //discard card from hand
        8:  954:      discardCard(handPos, currentPlayer, state, 0);
        -:  955:
        8:  956:      if (choice1)		//+2 coins
        -:  957:	{
    #####:  958:	  state->coins = state->coins + 2;
    #####:  959:	}
        -:  960:
        8:  961:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  962:	{
        -:  963:	  //discard hand
    #####:  964:	  while(numHandCards(state) > 0)
        -:  965:	    {
    #####:  966:	      discardCard(handPos, currentPlayer, state, 0);
        -:  967:	    }
        -:  968:
        -:  969:	  //draw 4
    #####:  970:	  for (i = 0; i < 4; i++)
        -:  971:	    {
    #####:  972:	      drawCard(currentPlayer, state);
    #####:  973:	    }
        -:  974:
        -:  975:	  //other players discard hand and redraw if hand size > 4
    #####:  976:	  for (i = 0; i < state->numPlayers; i++)
        -:  977:	    {
    #####:  978:	      if (i != currentPlayer)
        -:  979:		{
    #####:  980:		  if ( state->handCount[i] > 4 )
        -:  981:		    {
        -:  982:		      //discard hand
    #####:  983:		      while( state->handCount[i] > 0 )
        -:  984:			{
    #####:  985:			  discardCard(handPos, i, state, 0);
        -:  986:			}
        -:  987:
        -:  988:		      //draw 4
    #####:  989:		      for (j = 0; j < 4; j++)
        -:  990:			{
    #####:  991:			  drawCard(i, state);
    #####:  992:			}
    #####:  993:		    }
    #####:  994:		}
    #####:  995:	    }
        -:  996:
    #####:  997:	}
        8:  998:      return 0;
        -:  999:
        -: 1000:    case steward:
       54: 1001:      if (choice1 == 1)
        -: 1002:	{
        -: 1003:	  //+2 cards
    #####: 1004:	  drawCard(currentPlayer, state);
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	}
       54: 1007:      else if (choice1 == 2)
        -: 1008:	{
        -: 1009:	  //+2 coins
    #####: 1010:	  state->coins = state->coins + 2;
    #####: 1011:	}
        -: 1012:      else
        -: 1013:	{
        -: 1014:	  //trash 2 cards in hand
       54: 1015:	  discardCard(choice2, currentPlayer, state, 1);
       54: 1016:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1017:	}
        -: 1018:
        -: 1019:      //discard card from hand
       54: 1020:      discardCard(handPos, currentPlayer, state, 0);
       54: 1021:      return 0;
        -: 1022:
        -: 1023:    case tribute:
       43: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        4: 1025:	if (state->deckCount[nextPlayer] > 0){
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
    #####: 1028:	}
        4: 1029:	else if (state->discardCount[nextPlayer] > 0){
        2: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        2: 1031:	  state->discardCount[nextPlayer]--;
        2: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
        4: 1039:      }
        -: 1040:
        -: 1041:      else{
       39: 1042:	if (state->deckCount[nextPlayer] == 0){
       76: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
       30: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
       30: 1045:	    state->deckCount[nextPlayer]++;
       30: 1046:	    state->discard[nextPlayer][i] = -1;
       30: 1047:	    state->discardCount[nextPlayer]--;
       30: 1048:	  }
        -: 1049:
        8: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
        8: 1051:	}
       39: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       39: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       39: 1054:	state->deckCount[nextPlayer]--;
       39: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       39: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       39: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }
        -: 1059:
       43: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
       14: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       14: 1062:	state->playedCardCount++;
       14: 1063:	tributeRevealedCards[1] = -1;
       14: 1064:      }
        -: 1065:
      344: 1066:      for (i = 0; i <= 2; i ++){
      335: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
       33: 1068:	  state->coins += 2;
       33: 1069:	}
        -: 1070:
      439: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
       12: 1072:	  drawCard(currentPlayer, state);
       12: 1073:	  drawCard(currentPlayer, state);
       12: 1074:	}
        -: 1075:	else{//Action Card
       84: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
      129: 1078:      }
        -: 1079:
       43: 1080:      return 0;
        -: 1081:
        -: 1082:    case ambassador:
       40: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
       80: 1085:      if (choice2 > 2 || choice2 < 0)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
       40: 1090:      if (choice1 == handPos)
        -: 1091:	{
       18: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
      264: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
      209: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1098:	    {
       11: 1099:	      j++;
       11: 1100:	    }
      110: 1101:	}
       22: 1102:      if (j < choice2)
        -: 1103:	{
    #####: 1104:	  return -1;
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG)
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
       22: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:
        -: 1113:      //each other player gains a copy of revealed card
      200: 1114:      for (i = 0; i < state->numPlayers; i++)
        -: 1115:	{
       78: 1116:	  if (i != currentPlayer)
        -: 1117:	    {
       56: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
       56: 1119:	    }
       78: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
       22: 1123:      discardCard(handPos, currentPlayer, state, 0);
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
       44: 1126:      for (j = 0; j < choice2; j++)
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    #####: 1133:		  break;
        -: 1134:		}
    #####: 1135:	    }
    #####: 1136:	}
        -: 1137:
       22: 1138:      return 0;
        -: 1139:
        -: 1140:    case cutpurse:
        -: 1141:
       16: 1142:      updateCoins(currentPlayer, state, 2);
      136: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
       52: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
       72: 1147:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1160:			}
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		}
        -: 1164:
       36: 1165:	    }
        -: 1166:
       52: 1167:	}
        -: 1168:
        -: 1169:      //discard played card from hand
       16: 1170:      discardCard(handPos, currentPlayer, state, 0);
        -: 1171:
       16: 1172:      return 0;
        -: 1173:
        -: 1174:
        -: 1175:    case embargo:
        -: 1176:      //+2 Coins
       33: 1177:      state->coins = state->coins + 2;
        -: 1178:
        -: 1179:      //see if selected pile is in play
       33: 1180:      if ( state->supplyCount[choice1] == -1 )
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:
        -: 1185:      //add embargo token to selected supply pile
       33: 1186:      state->embargoTokens[choice1]++;
        -: 1187:
        -: 1188:      //trash card
       33: 1189:      discardCard(handPos, currentPlayer, state, 1);
       33: 1190:      return 0;
        -: 1191:
        -: 1192:    case outpost:
        -: 1193:      //set outpost flag
        5: 1194:      state->outpostPlayed++;
        -: 1195:
        -: 1196:      //discard card
        5: 1197:      discardCard(handPos, currentPlayer, state, 0);
        5: 1198:      return 0;
        -: 1199:
        -: 1200:    case salvager:
        -: 1201:      //+1 buy
       35: 1202:      state->numBuys++;
        -: 1203:
       35: 1204:      if (choice1)
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1210:	}
        -: 1211:
        -: 1212:      //discard card
       35: 1213:      discardCard(handPos, currentPlayer, state, 0);
       35: 1214:      return 0;
        -: 1215:
        -: 1216:    case sea_hag:
     1728: 1217:      for (i = 0; i < state->numPlayers; i++){
      676: 1218:	if (i != currentPlayer){
      488: 1219:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      488: 1220:	  state->discardCount[i]++;
      488: 1221:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
      488: 1222:	}
      676: 1223:      }
      188: 1224:      return 0;
        -: 1225:
        -: 1226:    case treasure_map:
        -: 1227:      //search hand for another treasure_map
       17: 1228:      index = -1;
      204: 1229:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:	{
      102: 1231:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:	    {
    #####: 1233:	      index = i;
    #####: 1234:	      break;
        -: 1235:	    }
       85: 1236:	}
       17: 1237:      if (index > -1)
        -: 1238:	{
        -: 1239:	  //trash both treasure cards
    #####: 1240:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:	  discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:	  //gain 4 Gold cards
    #####: 1244:	  for (i = 0; i < 4; i++)
        -: 1245:	    {
    #####: 1246:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1247:	    }
        -: 1248:
        -: 1249:	  //return success
    #####: 1250:	  return 1;
        -: 1251:	}
        -: 1252:
        -: 1253:      //no second treasure_map found in hand
       17: 1254:      return -1;
        -: 1255:    }
        -: 1256:
    #####: 1257:  return -1;
      963: 1258:}
        -: 1259:
        -: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:  //if card is not trashed, added to Played pile
      370: 1264:  if (trashFlag < 1)
        -: 1265:    {
        -: 1266:      //add card to played pile
      229: 1267:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      229: 1268:      state->playedCardCount++;
      229: 1269:    }
        -: 1270:
        -: 1271:  //set played card to -1
      370: 1272:  state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:  //remove card from player's hand
      370: 1275:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       33: 1278:      state->handCount[currentPlayer]--;
       33: 1279:    }
      337: 1280:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
    #####: 1284:    }
        -: 1285:  else
        -: 1286:    {
        -: 1287:      //replace discarded card with last card in hand
      337: 1288:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:      //set last card to -1
      337: 1290:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:      //reduce number of cards in hand
      337: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:
      370: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:  //Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:  //check if supply pile is empty (0) or card is not used in game (-1)
     1306: 1303:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:    {
        7: 1305:      return -1;
        -: 1306:    }
        -: 1307:
        -: 1308:  //added card for [whoseTurn] current player:
        -: 1309:  // toFlag = 0 : add to discard
        -: 1310:  // toFlag = 1 : add to deck
        -: 1311:  // toFlag = 2 : add to hand
        -: 1312:
     1299: 1313:  if (toFlag == 1)
        -: 1314:    {
    #####: 1315:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1316:      state->deckCount[player]++;
    #####: 1317:    }
     1299: 1318:  else if (toFlag == 2)
        -: 1319:    {
    #####: 1320:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1321:      state->handCount[player]++;
    #####: 1322:    }
        -: 1323:  else
        -: 1324:    {
     1299: 1325:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1299: 1326:      state->discardCount[player]++;
        -: 1327:    }
        -: 1328:
        -: 1329:  //decrease number in supply pile
     1299: 1330:  state->supplyCount[supplyPos]--;
        -: 1331:
     1299: 1332:  return 0;
     1306: 1333:}
        -: 1334:
        -: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:  int i;
        -: 1338:
        -: 1339:  //reset coin count
     3515: 1340:  state->coins = 0;
        -: 1341:
        -: 1342:  //add coins for each Treasure card in player's hand
    41108: 1343:  for (i = 0; i < state->handCount[player]; i++)
        -: 1344:    {
    17039: 1345:      if (state->hand[player][i] == copper)
        -: 1346:	{
     6576: 1347:	  state->coins += 1;
     6576: 1348:	}
    10463: 1349:      else if (state->hand[player][i] == silver)
        -: 1350:	{
     2309: 1351:	  state->coins += 2;
     2309: 1352:	}
     8154: 1353:      else if (state->hand[player][i] == gold)
        -: 1354:	{
      368: 1355:	  state->coins += 3;
      368: 1356:	}
    17039: 1357:    }
        -: 1358:
        -: 1359:  //add bonus
     3515: 1360:  state->coins += bonus;
        -: 1361:
     3515: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
