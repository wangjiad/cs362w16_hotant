*** Starting Steward Random Tester ***
timeseed: 1457783485
players: 2
-------------PASS1---------
timeseed: 1457783485
players: 2
player turn: 0
numCards before: 390
Using steward with choice = 1
numCards after: 391
----------------------
------------PASS2----------
timeseed: 1457783485
players: 2
player turn: 0
coin before: 3
Using steward with choice = 1
coin after: 5
----------------------
------------PASS3----------
timeseed: 1457783485
players: 2
player turn: 0
numCards before: 390
Using steward with choice = 3
numCards after: 387
----------------------
Tests passed: 3
Tests fails: 0
File 'dominion.c'
Lines executed:27.48% of 655
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     3302:    9:  if (*(int*)a > *(int*)b)
     1405:   10:    return 1;
     1897:   11:  if (*(int*)a < *(int*)b)
     1073:   12:    return -1;
      824:   13:  return 0;
     3302:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      printf("Init players failed\n");
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        5:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      110:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1100:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      950:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:        printf("Init kingdom cards failed\n");
    #####:   65:	      return -1;
        -:   66:	    }
      500:   67:        }
       50:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        5:   75:  if (numPlayers == 2)
        -:   76:    {
        5:   77:      state->supplyCount[curse] = 10;
        5:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        5:   89:  if (numPlayers == 2)
        -:   90:    {
        5:   91:      state->supplyCount[estate] = 8;
        5:   92:      state->supplyCount[duchy] = 8;
        5:   93:      state->supplyCount[province] = 8;
        5:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        5:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  104:  state->supplyCount[silver] = 40;
        5:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      210:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     1650:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      775:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      100:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
        5:  117:		  if (numPlayers == 2){
        5:  118:		    state->supplyCount[i] = 8;
        5:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        5:  121:		}
        -:  122:	      else
        -:  123:		{
       45:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       50:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      725:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      725:  132:	}
        -:  133:
      100:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       30:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       10:  142:      state->deckCount[i] = 0;
       80:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       30:  145:	  state->deck[i][j] = estate;
       30:  146:	  state->deckCount[i]++;
       30:  147:	}
      160:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       70:  150:	  state->deck[i][j] = copper;
       70:  151:	  state->deckCount[i]++;
       70:  152:	}
       10:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       30:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       10:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:    printf("Shuffle failed?\n");
    #####:  161:	  return -1;
        -:  162:	}
       10:  163:    }
        -:  164:
        -:  165:  //draw player hands
       30:  166:  for (i = 0; i < numPlayers; i++)
        -:  167:    {
        -:  168:      //initialize hand size to zero
       10:  169:      state->handCount[i] = 0;
       10:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
       10:  176:    }
        -:  177:
        -:  178:  //set embargo tokens to 0 for all supply piles
      280:  179:  for (i = 0; i <= treasure_map; i++)
        -:  180:    {
      135:  181:      state->embargoTokens[i] = 0;
      135:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        5:  185:  state->outpostPlayed = 0;
        5:  186:  state->phase = 0;
        5:  187:  state->numActions = 1;
        5:  188:  state->numBuys = 1;
        5:  189:  state->playedCardCount = 0;
        5:  190:  state->whoseTurn = 0;
        5:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       60:  195:  for (it = 0; it < 5; it++){
       25:  196:    drawCard(state->whoseTurn, state);
       25:  197:  }
        -:  198:
        5:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        5:  201:  return 0;
        5:  202:}
        -:  203:
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       12:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       12:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
       12:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     1576:  216:  while (state->deckCount[player] > 0) {
      776:  217:    card = floor(Random() * state->deckCount[player]);
      776:  218:    newDeck[newDeckPos] = state->deck[player][card];
      776:  219:    newDeckPos++;
   124402:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
    61425:  221:      state->deck[player][i] = state->deck[player][i+1];
    61425:  222:    }
      776:  223:    state->deckCount[player]--;
        -:  224:  }
     1576:  225:  for (i = 0; i < newDeckPos; i++) {
      776:  226:    state->deck[player][i] = newDeck[i];
      776:  227:    state->deckCount[player]++;
      776:  228:  }
        -:  229:
       12:  230:  return 0;
       12:  231:}
        -:  232:
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      printf("Wrong Phase to play card\n");
    #####:  242:      return -1;
        -:  243:    }
        -:  244:
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
        -:  247:    {
    #####:  248:      printf("Not enough actions to play card\n");
    #####:  249:      return -1;
        -:  250:    }
        -:  251:
        -:  252:  //get card played
    #####:  253:  card = handCard(handPos, state);
        -:  254:
        -:  255:  //check if selected card is an action
    #####:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
        -:  258:      //printf("Card played is not an action card\n");
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:
    #####:  274:  return 0;
    #####:  275:}
        -:  276:
        -:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:
    #####:  313:  return 0;
    #####:  314:}
        -:  315:
        -:  316:int numHandCards(struct gameState *state) {
       30:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
        -:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
        -:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
        -:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
    #####:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
        -:  351:int whoseTurn(struct gameState *state) {
       60:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
        -:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
        -:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
    #####:  411:	  j++;
    #####:  412:	}
    #####:  413:    }
    #####:  414:  if ( j >= 3)
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
    #####:  420:}
        -:  421:
        -:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
        -:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
    #####:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
    #####:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
    #####:  489:	}
    #####:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
    #####:  500:	}
    #####:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
    #####:  510:	}
    #####:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
    #####:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
    #####:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
        -:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
       39:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
     1356:  538:    for (i = 0; i < state->discardCount[player];i++){
      676:  539:      state->deck[player][i] = state->discard[player][i];
      676:  540:      state->discard[player][i] = -1;
      676:  541:    }
        -:  542:
        2:  543:    state->deckCount[player] = state->discardCount[player];
        2:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
        2:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:
        2:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
        2:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:
        2:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
        2:  564:    if (deckCounter == 0)
    #####:  565:      return -1;
        -:  566:
        2:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  568:    state->deckCount[player]--;
        2:  569:    state->handCount[player]++;//Increment hand count
        2:  570:  }
        -:  571:
        -:  572:  else{
       37:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       37:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       37:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       37:  581:    state->deckCount[player]--;
       37:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       39:  585:  return 0;
       39:  586:}
        -:  587:
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber )
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo:
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
        -:  651:// ASSIGNMENT ONE REFACTORED FUNCTIONS HERE
        -:  652:
        -:  653:int Adventurer(struct gameState *state, int currentPlayer){
    #####:  654:  int drawntreasure = 0;
        -:  655:  //int currentPlayer = whoseTurn(state);
        -:  656:  int cardDrawn;
        -:  657:  int temphand[MAX_HAND];
    #####:  658:  int z = 0;// this is the counter for the temp hand
        -:  659:
    #####:  660:  while(drawntreasure<2){
    #####:  661:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  662:      shuffle(currentPlayer, state);
    #####:  663:    }
    #####:  664:    drawCard(currentPlayer, state);
    #####:  665:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  666:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  667:      drawntreasure++;
        -:  668:    else{
    #####:  669:      temphand[z]=cardDrawn;
    #####:  670:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  671:      z++;
        -:  672:    }
        -:  673:  }
    #####:  674:  while(z-1>=0){
    #####:  675:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  676:    z=z-1;
        -:  677:  }
    #####:  678:  return 0;
        -:  679:}
        -:  680:
        -:  681:int Remodel(struct gameState *state, int choice1, int choice2, int handPos){
        -:  682:  int j;
        -:  683:  int i;
    #####:  684:  int currentPlayer = whoseTurn(state);
        -:  685:
    #####:  686:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  687:
    #####:  688:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  689:  {
    #####:  690:  return 0;
        -:  691:  }
        -:  692:
    #####:  693:  gainCard(choice2, state, 0, currentPlayer);
        -:  694:
        -:  695:  //discard card from hand
    #####:  696:  discardCard(handPos, currentPlayer, state, 0);
        -:  697:
        -:  698:  //discard trashed card
    #####:  699:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  700:  {
    #####:  701:    if (state->hand[currentPlayer][i] == j)
        -:  702:    {
    #####:  703:      discardCard(i, currentPlayer, state, 0);
    #####:  704:      break;
        -:  705:    }
    #####:  706:  }
    #####:  707:  return 0;
    #####:  708:}
        -:  709:
        -:  710:int Minion(struct gameState *state, int choice1, int choice2, int handPos){
        -:  711:
    #####:  712:  int currentPlayer = whoseTurn(state);
        -:  713:  int i;
        -:  714:  int j;
        -:  715:
    #####:  716:  state->numActions++;
        -:  717:
        -:  718:  //discard card from hand
    #####:  719:  discardCard(handPos, currentPlayer, state, 0);
        -:  720:
    #####:  721:  if (choice2)		//+2 coins
        -:  722:  {
    #####:  723:    state->coins = state->coins + 2;
    #####:  724:  }
        -:  725:
    #####:  726:  else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  727:  {
        -:  728:    //discard hand
    #####:  729:    while(numHandCards(state) > 0){
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:    }
        -:  732:
        -:  733:    //draw 4
    #####:  734:    for (i = 0; i < 4; i++){
    #####:  735:      drawCard(currentPlayer, state);
    #####:  736:    }
        -:  737:
        -:  738:    //other players discard hand and redraw if hand size > 4
    #####:  739:    for (i = 0; i < state->numPlayers; i++){
    #####:  740:      if (i != currentPlayer){
    #####:  741:        if ( state->handCount[i] > 4 ){
        -:  742:          //discard hand
    #####:  743:          while( state->handCount[i] > 0 ){
    #####:  744:            discardCard(handPos, i, state, 0);
        -:  745:          }
        -:  746:
        -:  747:          //draw 4
    #####:  748:          for (j = 0; j < 4; j++){
    #####:  749:            drawCard(i, state);
    #####:  750:          }
    #####:  751:        }
    #####:  752:      }
    #####:  753:    }
        -:  754:
    #####:  755:  }
    #####:  756:      return 0;
        -:  757:}
        -:  758:
        -:  759:int Sea_hag(struct gameState *state){
        -:  760:  int i;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:
    #####:  763:  for (i = 0; i < state->numPlayers; i++){
    #####:  764:    if (i != currentPlayer){
    #####:  765:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  766:      state->discardCount[i]++;
    #####:  767:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####:  768:    }
    #####:  769:  }
    #####:  770:  return 0;
        -:  771:}
        -:  772:
        -:  773:int Steward(struct gameState *state, int choice1, int choice2, int choice3, int handPos){
        -:  774:
       15:  775:  int currentPlayer = whoseTurn(state);
        -:  776:
       15:  777:  if (choice1 == 1){
        -:  778:    //+2 cards
        5:  779:    drawCard(currentPlayer, state);
        5:  780:    drawCard(currentPlayer, state);
        5:  781:  }
       10:  782:  else if (choice1 == 2){
        -:  783:    //+2 coins
        5:  784:    state->coins = state->coins + 2;
        5:  785:  }
        -:  786:  else{
        -:  787:    //trash 2 cards in hand
        5:  788:    discardCard(choice2, currentPlayer, state, 1);
        5:  789:    discardCard(choice3, currentPlayer, state, 1);
        -:  790:  }
        -:  791:
        -:  792:  //discard card from hand
       15:  793:  discardCard(handPos, currentPlayer, state, 0);
       15:  794:  return 0;
        -:  795:}
        -:  796:
        -:  797:int cardEffect(int card, int choice1, int choice2, int choice3,
        -:  798:  struct gameState *state, int handPos, int *bonus)
        -:  799:{
        -:  800:  int i;
        -:  801:  int j;
        -:  802:  int k;
        -:  803:  int x;
        -:  804:  int index;
       15:  805:  int currentPlayer = whoseTurn(state);
       15:  806:  int nextPlayer = currentPlayer + 1;
        -:  807:
       15:  808:  int tributeRevealedCards[2] = {-1, -1};
        -:  809:  int temphand[MAX_HAND];// moved above the if statement
        -:  810:  //int drawntreasure=0;
        -:  811:  //int cardDrawn;
        -:  812:  //int z = 0;// this is the counter for the temp hand
       15:  813:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  814:    nextPlayer = 0;
    #####:  815:  }
        -:  816:
        -:  817:
        -:  818:  //uses switch to select card and perform actions
       18:  819:  switch( card )
        -:  820:    {
        -:  821:    case adventurer:
    #####:  822:      return Adventurer(state, currentPlayer);
        -:  823:      /*while(drawntreasure<2){
        -:  824:	       if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  825:	          shuffle(currentPlayer, state);
        -:  826:          }
        -:  827:      	drawCard(currentPlayer, state);
        -:  828:      	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  829:      	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  830:      	  drawntreasure++;
        -:  831:      	else{
        -:  832:      	  temphand[z]=cardDrawn;
        -:  833:      	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  834:      	  z++;
        -:  835:      	}
        -:  836:      }
        -:  837:      while(z-1>=0){
        -:  838:      	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  839:      	z=z-1;
        -:  840:      }
        -:  841:      return 0;*/
        -:  842:
        -:  843:    case council_room:
        -:  844:      //+4 Cards
    #####:  845:      for (i = 0; i < 4; i++)
        -:  846:    	{
    #####:  847:    	  drawCard(currentPlayer, state);
    #####:  848:    	}
        -:  849:
        -:  850:      //+1 Buy
    #####:  851:      state->numBuys++;
        -:  852:
        -:  853:      //Each other player draws a card
    #####:  854:      for (i = 0; i < state->numPlayers; i++){
    #####:  855:	      if ( i != currentPlayer ){
    #####:  856:	      drawCard(i, state);
    #####:  857:  	    }
    #####:  858:    	}
        -:  859:
        -:  860:      //put played card in played card pile
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:      return 0;
        -:  864:
        -:  865:    case feast:
        -:  866:      //gain card with cost up to 5
        -:  867:      //Backup hand
    #####:  868:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  869:	      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  870:	      state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  871:      }
        -:  872:      //Backup hand
        -:  873:
        -:  874:      //Update Coins for Buy
    #####:  875:      updateCoins(currentPlayer, state, 5);
    #####:  876:      x = 1;//Condition to loop on
    #####:  877:      while( x == 1) {//Buy one card
    #####:  878:      	if (supplyCount(choice1, state) <= 0){
        -:  879:    	  if (DEBUG)
        -:  880:    	    printf("None of that card left, sorry!\n");
        -:  881:
        -:  882:    	  if (DEBUG){
        -:  883:    	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  884:    	  }
    #####:  885:    	}
    #####:  886:	else if (state->coins < getCost(choice1)){
    #####:  887:	  printf("That card is too expensive!\n");
        -:  888:
        -:  889:	  if (DEBUG){
        -:  890:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  891:	  }
    #####:  892:	}
        -:  893:	else{
        -:  894:
        -:  895:	  if (DEBUG){
        -:  896:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  897:	  }
        -:  898:
    #####:  899:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  900:	  x = 0;//No more buying cards
        -:  901:
        -:  902:	  if (DEBUG){
        -:  903:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  904:	  }
        -:  905:
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:      //Reset Hand
    #####:  910:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  911:	state->hand[currentPlayer][i] = temphand[i];
    #####:  912:	temphand[i] = -1;
    #####:  913:      }
        -:  914:      //Reset Hand
        -:  915:
    #####:  916:      return 0;
        -:  917:
        -:  918:    case gardens:
    #####:  919:      return -1;
        -:  920:
        -:  921:    case mine:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice2 > treasure_map || choice2 < curse)
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  935:	{
    #####:  936:	  return -1;
        -:  937:	}
        -:  938:
    #####:  939:      gainCard(choice2, state, 2, currentPlayer);
        -:  940:
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
        -:  943:
        -:  944:      //discard trashed card
    #####:  945:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  946:	{
    #####:  947:	  if (state->hand[currentPlayer][i] == j)
        -:  948:	    {
    #####:  949:	      discardCard(i, currentPlayer, state, 0);
    #####:  950:	      break;
        -:  951:	    }
    #####:  952:	}
        -:  953:
    #####:  954:      return 0;
        -:  955:
        -:  956:    case remodel:
    #####:  957:      Remodel(state, choice1, choice2, handPos);
        -:  958:      /*j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      gainCard(choice2, state, 0, currentPlayer);
        -:  966:
        -:  967:      //discard card from hand
        -:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:      //discard trashed card
        -:  971:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:	{
        -:  973:	  if (state->hand[currentPlayer][i] == j)
        -:  974:	    {
        -:  975:	      discardCard(i, currentPlayer, state, 0);
        -:  976:	      break;
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:
        -:  981:      return 0;*/
        -:  982:
        -:  983:    case smithy:
        -:  984:      //+3 Cards
    #####:  985:      for (i = 0; i < 3; i++)
        -:  986:	{
    #####:  987:	  drawCard(currentPlayer, state);
    #####:  988:	}
        -:  989:
        -:  990:      //discard card from hand
    #####:  991:      discardCard(handPos, currentPlayer, state, 0);
    #####:  992:      return 0;
        -:  993:
        -:  994:    case village:
        -:  995:      //+1 Card
    #####:  996:      drawCard(currentPlayer, state);
        -:  997:
        -:  998:      //+2 Actions
    #####:  999:      state->numActions = state->numActions + 2;
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1003:      return 0;
        -: 1004:
        -: 1005:    case baron:
    #####: 1006:      state->numBuys++;//Increase buys by 1!
    #####: 1007:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1008:	int p = 0;//Iterator for hand!
    #####: 1009:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1010:	while(card_not_discarded){
    #####: 1011:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1012:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1013:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1014:	    state->discardCount[currentPlayer]++;
    #####: 1015:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1016:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1017:	    }
    #####: 1018:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1019:	    state->handCount[currentPlayer]--;
    #####: 1020:	    card_not_discarded = 0;//Exit the loop
    #####: 1021:	  }
    #####: 1022:	  else if (p > state->handCount[currentPlayer]){
        -: 1023:	    if(DEBUG) {
        -: 1024:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1025:	      printf("Must gain an estate if there are any\n");
        -: 1026:	    }
    #####: 1027:	    if (supplyCount(estate, state) > 0){
    #####: 1028:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1029:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1030:	      if (supplyCount(estate, state) == 0){
    #####: 1031:		isGameOver(state);
    #####: 1032:	      }
    #####: 1033:	    }
    #####: 1034:	    card_not_discarded = 0;//Exit the loop
    #####: 1035:	  }
        -: 1036:
        -: 1037:	  else{
    #####: 1038:	    p++;//Next card
        -: 1039:	  }
        -: 1040:	}
    #####: 1041:      }
        -: 1042:
        -: 1043:      else{
    #####: 1044:	if (supplyCount(estate, state) > 0){
    #####: 1045:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1046:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1047:	  if (supplyCount(estate, state) == 0){
    #####: 1048:	    isGameOver(state);
    #####: 1049:	  }
    #####: 1050:	}
        -: 1051:      }
        -: 1052:
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case great_hall:
        -: 1057:      //+1 Card
    #####: 1058:      drawCard(currentPlayer, state);
        -: 1059:
        -: 1060:      //+1 Actions
    #####: 1061:      state->numActions++;
        -: 1062:
        -: 1063:      //discard card from hand
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:
        -: 1067:    case minion:
    #####: 1068:      Minion(state, choice1, choice2, handPos);
        -: 1069:/*
        -: 1070:      //+1 action
        -: 1071:      state->numActions++;
        -: 1072:
        -: 1073:      //discard card from hand
        -: 1074:      discardCard(handPos, currentPlayer, state, 0);
        -: 1075:
        -: 1076:      if (choice1)		//+2 coins
        -: 1077:	{
        -: 1078:	  state->coins = state->coins + 2;
        -: 1079:	}
        -: 1080:
        -: 1081:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1082:	{
        -: 1083:	  //discard hand
        -: 1084:	  while(numHandCards(state) > 0)
        -: 1085:	    {
        -: 1086:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1087:	    }
        -: 1088:
        -: 1089:	  //draw 4
        -: 1090:	  for (i = 0; i < 4; i++)
        -: 1091:	    {
        -: 1092:	      drawCard(currentPlayer, state);
        -: 1093:	    }
        -: 1094:
        -: 1095:	  //other players discard hand and redraw if hand size > 4
        -: 1096:	  for (i = 0; i < state->numPlayers; i++)
        -: 1097:	    {
        -: 1098:	      if (i != currentPlayer)
        -: 1099:		{
        -: 1100:		  if ( state->handCount[i] > 4 )
        -: 1101:		    {
        -: 1102:		      //discard hand
        -: 1103:		      while( state->handCount[i] > 0 )
        -: 1104:			{
        -: 1105:			  discardCard(handPos, i, state, 0);
        -: 1106:			}
        -: 1107:
        -: 1108:		      //draw 4
        -: 1109:		      for (j = 0; j < 4; j++)
        -: 1110:			{
        -: 1111:			  drawCard(i, state);
        -: 1112:			}
        -: 1113:		    }
        -: 1114:		}
        -: 1115:	    }
        -: 1116:
        -: 1117:	}
        -: 1118:      return 0;*/
        -: 1119:
        -: 1120:    case steward:
       15: 1121:      Steward(state, choice1, choice2, choice3, handPos);
       15: 1122:      return 0;
        -: 1123:      /*if (choice1 == 1)
        -: 1124:	{
        -: 1125:	  //+2 cards
        -: 1126:	  drawCard(currentPlayer, state);
        -: 1127:	  drawCard(currentPlayer, state);
        -: 1128:	}
        -: 1129:      else if (choice1 == 2)
        -: 1130:	{
        -: 1131:	  //+2 coins
        -: 1132:	  state->coins = state->coins + 2;
        -: 1133:	}
        -: 1134:      else
        -: 1135:	{
        -: 1136:	  //trash 2 cards in hand
        -: 1137:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1138:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1139:	}
        -: 1140:
        -: 1141:      //discard card from hand
        -: 1142:      discardCard(handPos, currentPlayer, state, 0);
        -: 1143:      return 0;
        -: 1144:*/
        -: 1145:    case tribute:
        3: 1146:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1147:	if (state->deckCount[nextPlayer] > 0){
    #####: 1148:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1149:	  state->deckCount[nextPlayer]--;
    #####: 1150:	}
    #####: 1151:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1152:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1153:	  state->discardCount[nextPlayer]--;
    #####: 1154:	}
        -: 1155:	else{
        -: 1156:	  //No Card to Reveal
        -: 1157:	  if (DEBUG){
        -: 1158:	    printf("No cards to reveal\n");
        -: 1159:	  }
        -: 1160:	}
    #####: 1161:      }
        -: 1162:
        -: 1163:      else{
        3: 1164:	if (state->deckCount[nextPlayer] == 0){
    #####: 1165:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1166:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1167:	    state->deckCount[nextPlayer]++;
    #####: 1168:	    state->discard[nextPlayer][i] = -1;
    #####: 1169:	    state->discardCount[nextPlayer]--;
    #####: 1170:	  }
        -: 1171:
    #####: 1172:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1173:	}
        3: 1174:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        3: 1175:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        3: 1176:	state->deckCount[nextPlayer]--;
        3: 1177:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        3: 1178:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        3: 1179:	state->deckCount[nextPlayer]--;
        -: 1180:      }
        -: 1181:
        3: 1182:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
        1: 1183:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        1: 1184:	state->playedCardCount++;
        1: 1185:	tributeRevealedCards[1] = -1;
        1: 1186:      }
        -: 1187:
       24: 1188:      for (i = 0; i <= 2; i ++){
       23: 1189:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        2: 1190:	  state->coins += 2;
        2: 1191:	}
        -: 1192:
       27: 1193:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        2: 1194:	  drawCard(currentPlayer, state);
        2: 1195:	  drawCard(currentPlayer, state);
        2: 1196:	}
        -: 1197:	else{//Action Card
        5: 1198:	  state->numActions = state->numActions + 2;
        -: 1199:	}
        9: 1200:      }
        -: 1201:
        3: 1202:      return 0;
        -: 1203:
        -: 1204:    case ambassador:
    #####: 1205:      j = 0;		//used to check if player has enough cards to discard
        -: 1206:
    #####: 1207:      if (choice2 > 2 || choice2 < 0)
        -: 1208:	{
    #####: 1209:	  return -1;
        -: 1210:	}
        -: 1211:
    #####: 1212:      if (choice1 == handPos)
        -: 1213:	{
    #####: 1214:	  return -1;
        -: 1215:	}
        -: 1216:
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1218:	{
    #####: 1219:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1220:	    {
    #####: 1221:	      j++;
    #####: 1222:	    }
    #####: 1223:	}
    #####: 1224:      if (j < choice2)
        -: 1225:	{
    #####: 1226:	  return -1;
        -: 1227:	}
        -: 1228:
        -: 1229:      if (DEBUG)
        -: 1230:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1231:
        -: 1232:      //increase supply count for choosen card by amount being discarded
    #####: 1233:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1234:
        -: 1235:      //each other player gains a copy of revealed card
    #####: 1236:      for (i = 0; i < state->numPlayers; i++)
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
        -: 1239:	    {
    #####: 1240:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1241:	    }
    #####: 1242:	}
        -: 1243:
        -: 1244:      //discard played card from hand
    #####: 1245:      discardCard(handPos, currentPlayer, state, 0);
        -: 1246:
        -: 1247:      //trash copies of cards returned to supply
    #####: 1248:      for (j = 0; j < choice2; j++)
        -: 1249:	{
    #####: 1250:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	    {
    #####: 1252:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1253:		{
    #####: 1254:		  discardCard(i, currentPlayer, state, 1);
    #####: 1255:		  break;
        -: 1256:		}
    #####: 1257:	    }
    #####: 1258:	}
        -: 1259:
    #####: 1260:      return 0;
        -: 1261:
        -: 1262:    case cutpurse:
        -: 1263:
    #####: 1264:      updateCoins(currentPlayer, state, 2);
    #####: 1265:      for (i = 0; i < state->numPlayers; i++)
        -: 1266:	{
    #####: 1267:	  if (i != currentPlayer)
        -: 1268:	    {
    #####: 1269:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1270:		{
    #####: 1271:		  if (state->hand[i][j] == copper)
        -: 1272:		    {
    #####: 1273:		      discardCard(j, i, state, 0);
    #####: 1274:		      break;
        -: 1275:		    }
    #####: 1276:		  if (j == state->handCount[i])
        -: 1277:		    {
    #####: 1278:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1279:			{
        -: 1280:			  if (DEBUG)
        -: 1281:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1282:			}
    #####: 1283:		      break;
        -: 1284:		    }
    #####: 1285:		}
        -: 1286:
    #####: 1287:	    }
        -: 1288:
    #####: 1289:	}
        -: 1290:
        -: 1291:      //discard played card from hand
    #####: 1292:      discardCard(handPos, currentPlayer, state, 0);
        -: 1293:
    #####: 1294:      return 0;
        -: 1295:
        -: 1296:
        -: 1297:    case embargo:
        -: 1298:      //+2 Coins
    #####: 1299:      state->coins = state->coins + 2;
        -: 1300:
        -: 1301:      //see if selected pile is in play
    #####: 1302:      if ( state->supplyCount[choice1] == -1 )
        -: 1303:	{
    #####: 1304:	  return -1;
        -: 1305:	}
        -: 1306:
        -: 1307:      //add embargo token to selected supply pile
    #####: 1308:      state->embargoTokens[choice1]++;
        -: 1309:
        -: 1310:      //trash card
    #####: 1311:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1312:      return 0;
        -: 1313:
        -: 1314:    case outpost:
        -: 1315:      //set outpost flag
    #####: 1316:      state->outpostPlayed++;
        -: 1317:
        -: 1318:      //discard card
    #####: 1319:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1320:      return 0;
        -: 1321:
        -: 1322:    case salvager:
        -: 1323:      //+1 buy
    #####: 1324:      state->numBuys++;
        -: 1325:
    #####: 1326:      if (choice1)
        -: 1327:	{
        -: 1328:	  //gain coins equal to trashed card
    #####: 1329:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1330:	  //trash card
    #####: 1331:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1332:	}
        -: 1333:
        -: 1334:      //discard card
    #####: 1335:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:      return 0;
        -: 1337:
        -: 1338:    case sea_hag:
    #####: 1339:      Sea_hag(state);
        -: 1340:    /*
        -: 1341:      for (i = 0; i < state->numPlayers; i++){
        -: 1342:	if (i != currentPlayer){
        -: 1343:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1344:	  state->discardCount[i]++;
        -: 1345:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1346:	}
        -: 1347:      }
        -: 1348:      return 0;
        -: 1349:*/
        -: 1350:    case treasure_map:
        -: 1351:      //search hand for another treasure_map
    #####: 1352:      index = -1;
    #####: 1353:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1354:	{
    #####: 1355:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1356:	    {
    #####: 1357:	      index = i;
    #####: 1358:	      break;
        -: 1359:	    }
    #####: 1360:	}
    #####: 1361:      if (index > -1)
        -: 1362:	{
        -: 1363:	  //trash both treasure cards
    #####: 1364:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1365:	  discardCard(index, currentPlayer, state, 1);
        -: 1366:
        -: 1367:	  //gain 4 Gold cards
    #####: 1368:	  for (i = 0; i < 4; i++)
        -: 1369:	    {
    #####: 1370:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1371:	    }
        -: 1372:
        -: 1373:	  //return success
    #####: 1374:	  return 1;
        -: 1375:	}
        -: 1376:
        -: 1377:      //no second treasure_map found in hand
    #####: 1378:      return -1;
        -: 1379:    }
        -: 1380:
    #####: 1381:  return -1;
       15: 1382:}
        -: 1383:
        -: 1384:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1385:{
        -: 1386:
        -: 1387:  //if card is not trashed, added to Played pile
       25: 1388:  if (trashFlag < 1)
        -: 1389:    {
        -: 1390:      //add card to played pile
       15: 1391:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       15: 1392:      state->playedCardCount++;
       15: 1393:    }
        -: 1394:
        -: 1395:  //set played card to -1
       25: 1396:  state->hand[currentPlayer][handPos] = -1;
        -: 1397:
        -: 1398:  //remove card from player's hand
       25: 1399:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1400:    {
        -: 1401:      //reduce number of cards in hand
    #####: 1402:      state->handCount[currentPlayer]--;
    #####: 1403:    }
       25: 1404:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1405:    {
        -: 1406:      //reduce number of cards in hand
    #####: 1407:      state->handCount[currentPlayer]--;
    #####: 1408:    }
        -: 1409:  else
        -: 1410:    {
        -: 1411:      //replace discarded card with last card in hand
       25: 1412:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1413:      //set last card to -1
       25: 1414:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1415:      //reduce number of cards in hand
       25: 1416:      state->handCount[currentPlayer]--;
        -: 1417:    }
        -: 1418:
       25: 1419:  return 0;
        -: 1420:}
        -: 1421:
        -: 1422:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1423:{
        -: 1424:  //Note: supplyPos is enum of choosen card
        -: 1425:
        -: 1426:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1427:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1428:    {
    #####: 1429:      return -1;
        -: 1430:    }
        -: 1431:
        -: 1432:  //added card for [whoseTurn] current player:
        -: 1433:  // toFlag = 0 : add to discard
        -: 1434:  // toFlag = 1 : add to deck
        -: 1435:  // toFlag = 2 : add to hand
        -: 1436:
    #####: 1437:  if (toFlag == 1)
        -: 1438:    {
    #####: 1439:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1440:      state->deckCount[player]++;
    #####: 1441:    }
    #####: 1442:  else if (toFlag == 2)
        -: 1443:    {
    #####: 1444:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1445:      state->handCount[player]++;
    #####: 1446:    }
        -: 1447:  else
        -: 1448:    {
    #####: 1449:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1450:      state->discardCount[player]++;
        -: 1451:    }
        -: 1452:
        -: 1453:  //decrease number in supply pile
    #####: 1454:  state->supplyCount[supplyPos]--;
        -: 1455:
    #####: 1456:  return 0;
    #####: 1457:}
        -: 1458:
        -: 1459:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1460:{
        -: 1461:  int i;
        -: 1462:
        -: 1463:  //reset coin count
        5: 1464:  state->coins = 0;
        -: 1465:
        -: 1466:  //add coins for each Treasure card in player's hand
       60: 1467:  for (i = 0; i < state->handCount[player]; i++)
        -: 1468:    {
       25: 1469:      if (state->hand[player][i] == copper)
        -: 1470:	{
       17: 1471:	  state->coins += 1;
       17: 1472:	}
        8: 1473:      else if (state->hand[player][i] == silver)
        -: 1474:	{
    #####: 1475:	  state->coins += 2;
    #####: 1476:	}
        8: 1477:      else if (state->hand[player][i] == gold)
        -: 1478:	{
    #####: 1479:	  state->coins += 3;
    #####: 1480:	}
       25: 1481:    }
        -: 1482:
        -: 1483:  //add bonus
        5: 1484:  state->coins += bonus;
        -: 1485:
        5: 1486:  return 0;
        -: 1487:}
        -: 1488:
        -: 1489:
        -: 1490://end of dominion.c
